import java.util.*;
class MemoryGame implements Game{
// just stubs of required functions

 boolean isWinner=false;
   String [][] grid = new String[6][6];
   int [][] board = new int[6][6];
   int turnCount=0; 
   String msg = "";
   String symbols [] = new String [8];
   String symbol = String.valueOf(0);
   int rowIndex = 0;
   int colIndex = 0;
   int match = 0; 
   int sc = 0;
   List<Integer> boardnumbers = new ArrayList<>(sc); //makes list w pairs of number for board size


   MemoryGame(){
   setUp();}
   
   
   public void setUp(){
      isWinner = false;
      turnCount=0; 
   }
   public int getTurnCount(){
      return(turnCount);}

   public List<Integer> initializeBoard(int boardIndex){ 
      for(int r = 0; r < boardIndex; r++){
      //row
         for(int c = 0; c < boardIndex; c++){
         //col
            grid[c][r] = "[]"; 
         }
      }
      sc = boardIndex * boardIndex;
      anotherBoardIndex = boardIndex; 
      boardnumbers = new ArrayList<>(sc);
      return (boardnumbers);
    }

   
   public boolean isValidBoard(int board){
      if (board == 2 || board == 4 || board == 6){
         return(true);}
      else{
         System.out.println("Please try again");
         return(false);
      } 
      
   }
   
   
   public void printGrid(int index){
      for (int row = 0; row < index; row++) {
         for (int col = 0; col < index; col++) {
            System.out.print(grid[row][col] + " ");
         }
         System.out.println();
      }
   }

   public boolean getMatch(){return false;}
   //found if it's matched and match++, match = boardChoice/2
    
   
   public boolean compareTo(){return false;} 
   //compare if the grid has the same symbols 
   
   public int [][] shufflingBoard (){
      for(int x = 0; x<2; x++){
         for (int i = 0; i < (sc/2); i++){
               boardnumbers.add(i);
         }
      } 
      Collections.shuffle(boardnumbers); //shuffles pairs to randomize
      
      int order = 0;
      for(int r=0;r<sc;r++){ //makes grid w images from random numbers
         for(int c=0;c<sc;c++){
            board[r][c] = boardnumbers.get(order);;
            order++;
         }
       }
       
       for(int r=0;r<sc;r++){ //makes grid w images from random numbers
         for(int c=0;c<sc;c++){
            System.out.print(board[r][c] + " ");
         }
         System.out.print("\n");
       }
       return (board);
}
   //return symbol and shuffling 
   
   public int [][] takeTurn(int rowChoice, int colChoice, int boardChoice){
      int num = board[rowChoice][colChoice]; 
      grid[rowChoice][colChoice] = symbol;
      for(int r = 0; r < boardChoice; r++){
            //row
            for(int c = 0; c < boardChoice; c++){
         //col
             System.out.print(board[r][c] + " ");
            }
            System.out.println();
         }
         
       return(board[row][col]);
   }
   //display hidden symbol in the grid 
   
   public boolean checkWinner(){return false;} 
   //get if match == boardChoice/2 
   
   public boolean isWinner(){return (false);}
    
   
   public String gameOverStatus(){return("inProgress");}
   
   public boolean isValidInput(int [] x){return(true);}


}// MemoryGame class
