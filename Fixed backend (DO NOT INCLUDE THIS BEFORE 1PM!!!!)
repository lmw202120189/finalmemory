import java.util.*;
//DISCLAIMER: THIS IS NOT FINAL. ISSUES FIXED: GET MATCH, WINNING. 
//NEED TO WORK ON: 2 PLAYERS 
class MemoryGame1{
   //public static void main(String argv[]){
   //use scanner to take in the client input
   Scanner input = new Scanner(System.in);
   //MemoryGame game = new MemoryGame();
   int getBoardChoice = 0;
   int  getRow = 0;
   int  getCol = 0;
   int [][] playBoard;
   int [][] secretBoard;
   int sizeChoice = 0;
   int matchCount = 0;
   boolean match = false;
   int turn = 0;
   int turnCount = 0;
   boolean winner = false;
   boolean boardInput = false;
   List<Integer> matchList = new ArrayList<Integer>(2);
   int hidden; 
   
   MemoryGame1(){
      
   }
   
   public void boardChoice(){
      while (boardInput == false){
         System.out.println("Board 1: 2*2 | Board 2: 4*4 | Board 3: 6*6");
         System.out.println("Enter the number of the board you would like to play: ");
         getBoardChoice = input.nextInt();
         //go to 2*2 board
        // System.out.println(getBoardChoice);
         if (getBoardChoice == 1){
            sizeChoice = 2;
            //system.println(sizeChoice);
            playBoard = playBoard(sizeChoice);
            secretBoard = makeBoard(sizeChoice);
            boardInput = true;
         }   
          //go to 4*4 board
         else if (getBoardChoice == 2){
            sizeChoice = 4;
            //system.println(sizeChoice);
            playBoard = playBoard(sizeChoice);
            secretBoard = makeBoard(sizeChoice);
            boardInput = true;
         }     
          //go to 6*6 board
         else if (getBoardChoice == 3){ 
            sizeChoice = 6;
            //system.println(sizeChoice);
            playBoard = playBoard(sizeChoice);
            secretBoard = makeBoard(sizeChoice);
            boardInput = true;
         
         } 
         else{
            System.out.println("You have to choose a valid board size!");
            boardInput = false;
            
         } 
        }
      int sc = sizeChoice*sizeChoice;
      isWinner(sizeChoice);
      while(winner == false && boardInput == true && turnCount <= sizeChoice*sizeChoice+(sizeChoice*2)){
         System.out.println("Enter a row choice: ");
         getRow = input.nextInt();
         getRow = getRow-1;
         System.out.println("Enter a column choice: ");
         getCol = input.nextInt();
         getCol = getCol-1;
         takeTurn(getRow, getCol, sizeChoice, playBoard, secretBoard);
         getTurn(turnCount);
         status(sizeChoice);
         
      }
      
   }  
   
                       
   public int [][] makeBoard(int sizeChoice){
         
      int[][] secretBoard = new int [sizeChoice][sizeChoice];
      int sc = sizeChoice*sizeChoice; //total amt of numbers needed
      List<Integer> boardNums = new ArrayList<>(sc); //makes list w pairs of number for board size
      for(int x = 0; x<2; x++){
         for (int i = 1; i <=(sc/2); i++){
            boardNums.add(i);
         }
      } 
      Collections.shuffle(boardNums); //shuffles pairs to randomize
      
      int order = 0;
      for(int r=0;r<sizeChoice;r++){ //makes grid w images from random numbers
         for(int c=0;c<sizeChoice;c++){
            secretBoard[r][c] = boardNums.get(order);
            order++;
         }
      }     
      return secretBoard;
   }
   public void createBoard(int sizeChoice){//set to 1 because we have 0 as place marker. 
   
      int total = (sizeChoice * sizeChoice) + 1;
      int [][] temp = new int [sizeChoice][sizeChoice];
      int order = 1;
      for(int r=0;r<sizeChoice;r++){
         
         for(int c=0;c<sizeChoice;c++){
            temp[r][c] = order;
            order++;
         }
      }
   }
   public int [][] playBoard(int sizeChoice){//Game play starts at 1 and increases turn after 2 choices
      
      int[][] playBoard = new int [sizeChoice][sizeChoice];
      for(int r=0;r<sizeChoice;r++){ //makes playing grid          
         
        for(int c=0;c<sizeChoice;c++){
            playBoard[r][c] = 0;
            System.out.print(playBoard[r][c] + " ");
         }
         System.out.print("\n");
      }
      return playBoard;
   }
   public void takeTurn(int rowChoice, int colChoice, int sizeChoice, int [][] playBoard, int [][] secretBoard){
   
      playBoard[rowChoice][colChoice] = secretBoard[rowChoice][colChoice];
      hidden = playBoard[rowChoice][colChoice];
      addList(hidden);
      turnCount++;
          if(isMatch() == true){
         System.out.println("You found a match!"); 
         upDatedBoard(sizeChoice, playBoard);
      }
      else{
      upDatedBoard(sizeChoice, playBoard);
         if (turnCount%2 == 0 && turnCount >= 2){
            System.out.println("Oops not a match!");
            for(int r=0;r<sizeChoice;r++){ //makes grid flipped back over
            
               for(int c=0;c<sizeChoice;c++){
                  if (playBoard[r][c] != 0 ){
                     playBoard[r][c] = 0;
                  }
               }
            }
            upDatedBoard(sizeChoice, playBoard);
         }
         
         isWinner(sizeChoice);
       }
       
    }  
    
  public int getTurn(int turnCount){
   turn = turnCount/2; 
   return turn;
  } 
  //get turn++ 
   public List<Integer> addList (int hidden){
      matchList.add(hidden);      
      return matchList;
   } //add hidden in a list
   
   public void upDatedBoard(int sizeChoice, int [][] playBoard){
      isWinner(sizeChoice);
      
      for(int r=0;r<sizeChoice;r++){ //makes grid w/ updated game play
         
         for(int c=0;c<sizeChoice;c++){
           
            System.out.print(playBoard[r][c] + " ");
         }
         System.out.print("\n");
      }
   }
   public boolean isMatch (){
     match = false;
     if(matchList.size()>1){
      if(matchList.get(0).equals(matchList.get(1))){
         match = true;
         getMatchCount();
         isWinner(sizeChoice);
         matchList.clear();
         } //if it is a match then match++, check for winner, clear the list
      else{
      matchList.clear();
      match = false;
      } 
      
      }      
      
      return match;
   }
   //return whether if it's a match
   
   public int getMatchCount(){
      matchCount++;
      return matchCount; }
   //count for matches
   
   public boolean isWinner (int sizeChoice){
      int trueSize = sizeChoice*sizeChoice;
      if(matchCount == trueSize/2 && turnCount <= trueSize+(sizeChoice*2)){
         winner = true;
         System.out.println("You won!");
      }
      else{
         winner = false; 
         }
      return winner;
} //check if win

   public void status(int sizeChoice){
      
      if(isWinner(sizeChoice) == true){
         System.out.println("Congrats! It took you: " + turn + " turns. With " + matchCount + " matches!");
      }
      else {
         if(isWinner(sizeChoice) == false && turn <= sizeChoice*sizeChoice+(sizeChoice*2)){
            System.out.println("On progress!" + "\n" + "Turns: " + turn + "\n" + "matches: " + matchCount);          
         }
         else{
            System.out.print("Ouch you lost :(. Don't give up!");
         }
      }
   }
}
